/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 66.0, "minX": 0.0, "maxY": 56635.0, "series": [{"data": [[0.0, 437.0], [0.1, 437.0], [0.2, 437.0], [0.3, 437.0], [0.4, 437.0], [0.5, 437.0], [0.6, 437.0], [0.7, 437.0], [0.8, 437.0], [0.9, 437.0], [1.0, 536.0], [1.1, 536.0], [1.2, 536.0], [1.3, 536.0], [1.4, 536.0], [1.5, 536.0], [1.6, 536.0], [1.7, 536.0], [1.8, 536.0], [1.9, 536.0], [2.0, 822.0], [2.1, 822.0], [2.2, 822.0], [2.3, 822.0], [2.4, 822.0], [2.5, 822.0], [2.6, 822.0], [2.7, 822.0], [2.8, 822.0], [2.9, 822.0], [3.0, 876.0], [3.1, 876.0], [3.2, 876.0], [3.3, 876.0], [3.4, 876.0], [3.5, 876.0], [3.6, 876.0], [3.7, 876.0], [3.8, 876.0], [3.9, 876.0], [4.0, 893.0], [4.1, 893.0], [4.2, 893.0], [4.3, 893.0], [4.4, 893.0], [4.5, 893.0], [4.6, 893.0], [4.7, 893.0], [4.8, 893.0], [4.9, 893.0], [5.0, 909.0], [5.1, 909.0], [5.2, 909.0], [5.3, 909.0], [5.4, 909.0], [5.5, 909.0], [5.6, 909.0], [5.7, 909.0], [5.8, 909.0], [5.9, 909.0], [6.0, 1090.0], [6.1, 1090.0], [6.2, 1090.0], [6.3, 1090.0], [6.4, 1090.0], [6.5, 1090.0], [6.6, 1090.0], [6.7, 1090.0], [6.8, 1090.0], [6.9, 1090.0], [7.0, 1210.0], [7.1, 1210.0], [7.2, 1210.0], [7.3, 1210.0], [7.4, 1210.0], [7.5, 1210.0], [7.6, 1210.0], [7.7, 1210.0], [7.8, 1210.0], [7.9, 1210.0], [8.0, 1231.0], [8.1, 1231.0], [8.2, 1231.0], [8.3, 1231.0], [8.4, 1231.0], [8.5, 1231.0], [8.6, 1231.0], [8.7, 1231.0], [8.8, 1231.0], [8.9, 1231.0], [9.0, 1344.0], [9.1, 1344.0], [9.2, 1344.0], [9.3, 1344.0], [9.4, 1344.0], [9.5, 1344.0], [9.6, 1344.0], [9.7, 1344.0], [9.8, 1344.0], [9.9, 1344.0], [10.0, 1433.0], [10.1, 1433.0], [10.2, 1433.0], [10.3, 1433.0], [10.4, 1433.0], [10.5, 1433.0], [10.6, 1433.0], [10.7, 1433.0], [10.8, 1433.0], [10.9, 1433.0], [11.0, 1506.0], [11.1, 1506.0], [11.2, 1506.0], [11.3, 1506.0], [11.4, 1506.0], [11.5, 1506.0], [11.6, 1506.0], [11.7, 1506.0], [11.8, 1506.0], [11.9, 1506.0], [12.0, 1567.0], [12.1, 1567.0], [12.2, 1567.0], [12.3, 1567.0], [12.4, 1567.0], [12.5, 1567.0], [12.6, 1567.0], [12.7, 1567.0], [12.8, 1567.0], [12.9, 1567.0], [13.0, 1623.0], [13.1, 1623.0], [13.2, 1623.0], [13.3, 1623.0], [13.4, 1623.0], [13.5, 1623.0], [13.6, 1623.0], [13.7, 1623.0], [13.8, 1623.0], [13.9, 1623.0], [14.0, 1675.0], [14.1, 1675.0], [14.2, 1675.0], [14.3, 1675.0], [14.4, 1675.0], [14.5, 1675.0], [14.6, 1675.0], [14.7, 1675.0], [14.8, 1675.0], [14.9, 1675.0], [15.0, 1734.0], [15.1, 1734.0], [15.2, 1734.0], [15.3, 1734.0], [15.4, 1734.0], [15.5, 1734.0], [15.6, 1734.0], [15.7, 1734.0], [15.8, 1734.0], [15.9, 1734.0], [16.0, 1742.0], [16.1, 1742.0], [16.2, 1742.0], [16.3, 1742.0], [16.4, 1742.0], [16.5, 1742.0], [16.6, 1742.0], [16.7, 1742.0], [16.8, 1742.0], [16.9, 1742.0], [17.0, 1807.0], [17.1, 1807.0], [17.2, 1807.0], [17.3, 1807.0], [17.4, 1807.0], [17.5, 1807.0], [17.6, 1807.0], [17.7, 1807.0], [17.8, 1807.0], [17.9, 1807.0], [18.0, 1847.0], [18.1, 1847.0], [18.2, 1847.0], [18.3, 1847.0], [18.4, 1847.0], [18.5, 1847.0], [18.6, 1847.0], [18.7, 1847.0], [18.8, 1847.0], [18.9, 1847.0], [19.0, 2013.0], [19.1, 2013.0], [19.2, 2013.0], [19.3, 2013.0], [19.4, 2013.0], [19.5, 2013.0], [19.6, 2013.0], [19.7, 2013.0], [19.8, 2013.0], [19.9, 2013.0], [20.0, 2105.0], [20.1, 2105.0], [20.2, 2105.0], [20.3, 2105.0], [20.4, 2105.0], [20.5, 2105.0], [20.6, 2105.0], [20.7, 2105.0], [20.8, 2105.0], [20.9, 2105.0], [21.0, 2224.0], [21.1, 2224.0], [21.2, 2224.0], [21.3, 2224.0], [21.4, 2224.0], [21.5, 2224.0], [21.6, 2224.0], [21.7, 2224.0], [21.8, 2224.0], [21.9, 2224.0], [22.0, 2420.0], [22.1, 2420.0], [22.2, 2420.0], [22.3, 2420.0], [22.4, 2420.0], [22.5, 2420.0], [22.6, 2420.0], [22.7, 2420.0], [22.8, 2420.0], [22.9, 2420.0], [23.0, 2547.0], [23.1, 2547.0], [23.2, 2547.0], [23.3, 2547.0], [23.4, 2547.0], [23.5, 2547.0], [23.6, 2547.0], [23.7, 2547.0], [23.8, 2547.0], [23.9, 2547.0], [24.0, 2576.0], [24.1, 2576.0], [24.2, 2576.0], [24.3, 2576.0], [24.4, 2576.0], [24.5, 2576.0], [24.6, 2576.0], [24.7, 2576.0], [24.8, 2576.0], [24.9, 2576.0], [25.0, 2905.0], [25.1, 2905.0], [25.2, 2905.0], [25.3, 2905.0], [25.4, 2905.0], [25.5, 2905.0], [25.6, 2905.0], [25.7, 2905.0], [25.8, 2905.0], [25.9, 2905.0], [26.0, 2907.0], [26.1, 2907.0], [26.2, 2907.0], [26.3, 2907.0], [26.4, 2907.0], [26.5, 2907.0], [26.6, 2907.0], [26.7, 2907.0], [26.8, 2907.0], [26.9, 2907.0], [27.0, 3011.0], [27.1, 3011.0], [27.2, 3011.0], [27.3, 3011.0], [27.4, 3011.0], [27.5, 3011.0], [27.6, 3011.0], [27.7, 3011.0], [27.8, 3011.0], [27.9, 3011.0], [28.0, 3084.0], [28.1, 3084.0], [28.2, 3084.0], [28.3, 3084.0], [28.4, 3084.0], [28.5, 3084.0], [28.6, 3084.0], [28.7, 3084.0], [28.8, 3084.0], [28.9, 3084.0], [29.0, 3140.0], [29.1, 3140.0], [29.2, 3140.0], [29.3, 3140.0], [29.4, 3140.0], [29.5, 3140.0], [29.6, 3140.0], [29.7, 3140.0], [29.8, 3140.0], [29.9, 3140.0], [30.0, 3370.0], [30.1, 3370.0], [30.2, 3370.0], [30.3, 3370.0], [30.4, 3370.0], [30.5, 3370.0], [30.6, 3370.0], [30.7, 3370.0], [30.8, 3370.0], [30.9, 3370.0], [31.0, 3558.0], [31.1, 3558.0], [31.2, 3558.0], [31.3, 3558.0], [31.4, 3558.0], [31.5, 3558.0], [31.6, 3558.0], [31.7, 3558.0], [31.8, 3558.0], [31.9, 3558.0], [32.0, 3630.0], [32.1, 3630.0], [32.2, 3630.0], [32.3, 3630.0], [32.4, 3630.0], [32.5, 3630.0], [32.6, 3630.0], [32.7, 3630.0], [32.8, 3630.0], [32.9, 3630.0], [33.0, 3676.0], [33.1, 3676.0], [33.2, 3676.0], [33.3, 3676.0], [33.4, 3676.0], [33.5, 3676.0], [33.6, 3676.0], [33.7, 3676.0], [33.8, 3676.0], [33.9, 3676.0], [34.0, 3709.0], [34.1, 3709.0], [34.2, 3709.0], [34.3, 3709.0], [34.4, 3709.0], [34.5, 3709.0], [34.6, 3709.0], [34.7, 3709.0], [34.8, 3709.0], [34.9, 3709.0], [35.0, 3730.0], [35.1, 3730.0], [35.2, 3730.0], [35.3, 3730.0], [35.4, 3730.0], [35.5, 3730.0], [35.6, 3730.0], [35.7, 3730.0], [35.8, 3730.0], [35.9, 3730.0], [36.0, 3843.0], [36.1, 3843.0], [36.2, 3843.0], [36.3, 3843.0], [36.4, 3843.0], [36.5, 3843.0], [36.6, 3843.0], [36.7, 3843.0], [36.8, 3843.0], [36.9, 3843.0], [37.0, 3990.0], [37.1, 3990.0], [37.2, 3990.0], [37.3, 3990.0], [37.4, 3990.0], [37.5, 3990.0], [37.6, 3990.0], [37.7, 3990.0], [37.8, 3990.0], [37.9, 3990.0], [38.0, 3998.0], [38.1, 3998.0], [38.2, 3998.0], [38.3, 3998.0], [38.4, 3998.0], [38.5, 3998.0], [38.6, 3998.0], [38.7, 3998.0], [38.8, 3998.0], [38.9, 3998.0], [39.0, 4105.0], [39.1, 4105.0], [39.2, 4105.0], [39.3, 4105.0], [39.4, 4105.0], [39.5, 4105.0], [39.6, 4105.0], [39.7, 4105.0], [39.8, 4105.0], [39.9, 4105.0], [40.0, 4307.0], [40.1, 4307.0], [40.2, 4307.0], [40.3, 4307.0], [40.4, 4307.0], [40.5, 4307.0], [40.6, 4307.0], [40.7, 4307.0], [40.8, 4307.0], [40.9, 4307.0], [41.0, 4416.0], [41.1, 4416.0], [41.2, 4416.0], [41.3, 4416.0], [41.4, 4416.0], [41.5, 4416.0], [41.6, 4416.0], [41.7, 4416.0], [41.8, 4416.0], [41.9, 4416.0], [42.0, 4574.0], [42.1, 4574.0], [42.2, 4574.0], [42.3, 4574.0], [42.4, 4574.0], [42.5, 4574.0], [42.6, 4574.0], [42.7, 4574.0], [42.8, 4574.0], [42.9, 4574.0], [43.0, 4612.0], [43.1, 4612.0], [43.2, 4612.0], [43.3, 4612.0], [43.4, 4612.0], [43.5, 4612.0], [43.6, 4612.0], [43.7, 4612.0], [43.8, 4612.0], [43.9, 4612.0], [44.0, 4826.0], [44.1, 4826.0], [44.2, 4826.0], [44.3, 4826.0], [44.4, 4826.0], [44.5, 4826.0], [44.6, 4826.0], [44.7, 4826.0], [44.8, 4826.0], [44.9, 4826.0], [45.0, 5083.0], [45.1, 5083.0], [45.2, 5083.0], [45.3, 5083.0], [45.4, 5083.0], [45.5, 5083.0], [45.6, 5083.0], [45.7, 5083.0], [45.8, 5083.0], [45.9, 5083.0], [46.0, 5264.0], [46.1, 5264.0], [46.2, 5264.0], [46.3, 5264.0], [46.4, 5264.0], [46.5, 5264.0], [46.6, 5264.0], [46.7, 5264.0], [46.8, 5264.0], [46.9, 5264.0], [47.0, 5401.0], [47.1, 5401.0], [47.2, 5401.0], [47.3, 5401.0], [47.4, 5401.0], [47.5, 5401.0], [47.6, 5401.0], [47.7, 5401.0], [47.8, 5401.0], [47.9, 5401.0], [48.0, 5477.0], [48.1, 5477.0], [48.2, 5477.0], [48.3, 5477.0], [48.4, 5477.0], [48.5, 5477.0], [48.6, 5477.0], [48.7, 5477.0], [48.8, 5477.0], [48.9, 5477.0], [49.0, 5485.0], [49.1, 5485.0], [49.2, 5485.0], [49.3, 5485.0], [49.4, 5485.0], [49.5, 5485.0], [49.6, 5485.0], [49.7, 5485.0], [49.8, 5485.0], [49.9, 5485.0], [50.0, 5561.0], [50.1, 5561.0], [50.2, 5561.0], [50.3, 5561.0], [50.4, 5561.0], [50.5, 5561.0], [50.6, 5561.0], [50.7, 5561.0], [50.8, 5561.0], [50.9, 5561.0], [51.0, 5760.0], [51.1, 5760.0], [51.2, 5760.0], [51.3, 5760.0], [51.4, 5760.0], [51.5, 5760.0], [51.6, 5760.0], [51.7, 5760.0], [51.8, 5760.0], [51.9, 5760.0], [52.0, 5838.0], [52.1, 5838.0], [52.2, 5838.0], [52.3, 5838.0], [52.4, 5838.0], [52.5, 5838.0], [52.6, 5838.0], [52.7, 5838.0], [52.8, 5838.0], [52.9, 5838.0], [53.0, 6098.0], [53.1, 6098.0], [53.2, 6098.0], [53.3, 6098.0], [53.4, 6098.0], [53.5, 6098.0], [53.6, 6098.0], [53.7, 6098.0], [53.8, 6098.0], [53.9, 6098.0], [54.0, 6194.0], [54.1, 6194.0], [54.2, 6194.0], [54.3, 6194.0], [54.4, 6194.0], [54.5, 6194.0], [54.6, 6194.0], [54.7, 6194.0], [54.8, 6194.0], [54.9, 6194.0], [55.0, 6454.0], [55.1, 6454.0], [55.2, 6454.0], [55.3, 6454.0], [55.4, 6454.0], [55.5, 6454.0], [55.6, 6454.0], [55.7, 6454.0], [55.8, 6454.0], [55.9, 6454.0], [56.0, 6758.0], [56.1, 6758.0], [56.2, 6758.0], [56.3, 6758.0], [56.4, 6758.0], [56.5, 6758.0], [56.6, 6758.0], [56.7, 6758.0], [56.8, 6758.0], [56.9, 6758.0], [57.0, 7109.0], [57.1, 7109.0], [57.2, 7109.0], [57.3, 7109.0], [57.4, 7109.0], [57.5, 7109.0], [57.6, 7109.0], [57.7, 7109.0], [57.8, 7109.0], [57.9, 7109.0], [58.0, 7172.0], [58.1, 7172.0], [58.2, 7172.0], [58.3, 7172.0], [58.4, 7172.0], [58.5, 7172.0], [58.6, 7172.0], [58.7, 7172.0], [58.8, 7172.0], [58.9, 7172.0], [59.0, 7192.0], [59.1, 7192.0], [59.2, 7192.0], [59.3, 7192.0], [59.4, 7192.0], [59.5, 7192.0], [59.6, 7192.0], [59.7, 7192.0], [59.8, 7192.0], [59.9, 7192.0], [60.0, 7237.0], [60.1, 7237.0], [60.2, 7237.0], [60.3, 7237.0], [60.4, 7237.0], [60.5, 7237.0], [60.6, 7237.0], [60.7, 7237.0], [60.8, 7237.0], [60.9, 7237.0], [61.0, 7842.0], [61.1, 7842.0], [61.2, 7842.0], [61.3, 7842.0], [61.4, 7842.0], [61.5, 7842.0], [61.6, 7842.0], [61.7, 7842.0], [61.8, 7842.0], [61.9, 7842.0], [62.0, 8156.0], [62.1, 8156.0], [62.2, 8156.0], [62.3, 8156.0], [62.4, 8156.0], [62.5, 8156.0], [62.6, 8156.0], [62.7, 8156.0], [62.8, 8156.0], [62.9, 8156.0], [63.0, 8251.0], [63.1, 8251.0], [63.2, 8251.0], [63.3, 8251.0], [63.4, 8251.0], [63.5, 8251.0], [63.6, 8251.0], [63.7, 8251.0], [63.8, 8251.0], [63.9, 8251.0], [64.0, 8397.0], [64.1, 8397.0], [64.2, 8397.0], [64.3, 8397.0], [64.4, 8397.0], [64.5, 8397.0], [64.6, 8397.0], [64.7, 8397.0], [64.8, 8397.0], [64.9, 8397.0], [65.0, 8518.0], [65.1, 8518.0], [65.2, 8518.0], [65.3, 8518.0], [65.4, 8518.0], [65.5, 8518.0], [65.6, 8518.0], [65.7, 8518.0], [65.8, 8518.0], [65.9, 8518.0], [66.0, 8680.0], [66.1, 8680.0], [66.2, 8680.0], [66.3, 8680.0], [66.4, 8680.0], [66.5, 8680.0], [66.6, 8680.0], [66.7, 8680.0], [66.8, 8680.0], [66.9, 8680.0], [67.0, 8987.0], [67.1, 8987.0], [67.2, 8987.0], [67.3, 8987.0], [67.4, 8987.0], [67.5, 8987.0], [67.6, 8987.0], [67.7, 8987.0], [67.8, 8987.0], [67.9, 8987.0], [68.0, 9018.0], [68.1, 9018.0], [68.2, 9018.0], [68.3, 9018.0], [68.4, 9018.0], [68.5, 9018.0], [68.6, 9018.0], [68.7, 9018.0], [68.8, 9018.0], [68.9, 9018.0], [69.0, 10191.0], [69.1, 10191.0], [69.2, 10191.0], [69.3, 10191.0], [69.4, 10191.0], [69.5, 10191.0], [69.6, 10191.0], [69.7, 10191.0], [69.8, 10191.0], [69.9, 10191.0], [70.0, 10296.0], [70.1, 10296.0], [70.2, 10296.0], [70.3, 10296.0], [70.4, 10296.0], [70.5, 10296.0], [70.6, 10296.0], [70.7, 10296.0], [70.8, 10296.0], [70.9, 10296.0], [71.0, 10786.0], [71.1, 10786.0], [71.2, 10786.0], [71.3, 10786.0], [71.4, 10786.0], [71.5, 10786.0], [71.6, 10786.0], [71.7, 10786.0], [71.8, 10786.0], [71.9, 10786.0], [72.0, 11674.0], [72.1, 11674.0], [72.2, 11674.0], [72.3, 11674.0], [72.4, 11674.0], [72.5, 11674.0], [72.6, 11674.0], [72.7, 11674.0], [72.8, 11674.0], [72.9, 11674.0], [73.0, 11711.0], [73.1, 11711.0], [73.2, 11711.0], [73.3, 11711.0], [73.4, 11711.0], [73.5, 11711.0], [73.6, 11711.0], [73.7, 11711.0], [73.8, 11711.0], [73.9, 11711.0], [74.0, 13732.0], [74.1, 13732.0], [74.2, 13732.0], [74.3, 13732.0], [74.4, 13732.0], [74.5, 13732.0], [74.6, 13732.0], [74.7, 13732.0], [74.8, 13732.0], [74.9, 13732.0], [75.0, 14164.0], [75.1, 14164.0], [75.2, 14164.0], [75.3, 14164.0], [75.4, 14164.0], [75.5, 14164.0], [75.6, 14164.0], [75.7, 14164.0], [75.8, 14164.0], [75.9, 14164.0], [76.0, 14297.0], [76.1, 14297.0], [76.2, 14297.0], [76.3, 14297.0], [76.4, 14297.0], [76.5, 14297.0], [76.6, 14297.0], [76.7, 14297.0], [76.8, 14297.0], [76.9, 14297.0], [77.0, 14836.0], [77.1, 14836.0], [77.2, 14836.0], [77.3, 14836.0], [77.4, 14836.0], [77.5, 14836.0], [77.6, 14836.0], [77.7, 14836.0], [77.8, 14836.0], [77.9, 14836.0], [78.0, 15762.0], [78.1, 15762.0], [78.2, 15762.0], [78.3, 15762.0], [78.4, 15762.0], [78.5, 15762.0], [78.6, 15762.0], [78.7, 15762.0], [78.8, 15762.0], [78.9, 15762.0], [79.0, 15829.0], [79.1, 15829.0], [79.2, 15829.0], [79.3, 15829.0], [79.4, 15829.0], [79.5, 15829.0], [79.6, 15829.0], [79.7, 15829.0], [79.8, 15829.0], [79.9, 15829.0], [80.0, 15954.0], [80.1, 15954.0], [80.2, 15954.0], [80.3, 15954.0], [80.4, 15954.0], [80.5, 15954.0], [80.6, 15954.0], [80.7, 15954.0], [80.8, 15954.0], [80.9, 15954.0], [81.0, 15964.0], [81.1, 15964.0], [81.2, 15964.0], [81.3, 15964.0], [81.4, 15964.0], [81.5, 15964.0], [81.6, 15964.0], [81.7, 15964.0], [81.8, 15964.0], [81.9, 15964.0], [82.0, 16790.0], [82.1, 16790.0], [82.2, 16790.0], [82.3, 16790.0], [82.4, 16790.0], [82.5, 16790.0], [82.6, 16790.0], [82.7, 16790.0], [82.8, 16790.0], [82.9, 16790.0], [83.0, 17648.0], [83.1, 17648.0], [83.2, 17648.0], [83.3, 17648.0], [83.4, 17648.0], [83.5, 17648.0], [83.6, 17648.0], [83.7, 17648.0], [83.8, 17648.0], [83.9, 17648.0], [84.0, 18824.0], [84.1, 18824.0], [84.2, 18824.0], [84.3, 18824.0], [84.4, 18824.0], [84.5, 18824.0], [84.6, 18824.0], [84.7, 18824.0], [84.8, 18824.0], [84.9, 18824.0], [85.0, 20210.0], [85.1, 20210.0], [85.2, 20210.0], [85.3, 20210.0], [85.4, 20210.0], [85.5, 20210.0], [85.6, 20210.0], [85.7, 20210.0], [85.8, 20210.0], [85.9, 20210.0], [86.0, 22049.0], [86.1, 22049.0], [86.2, 22049.0], [86.3, 22049.0], [86.4, 22049.0], [86.5, 22049.0], [86.6, 22049.0], [86.7, 22049.0], [86.8, 22049.0], [86.9, 22049.0], [87.0, 22731.0], [87.1, 22731.0], [87.2, 22731.0], [87.3, 22731.0], [87.4, 22731.0], [87.5, 22731.0], [87.6, 22731.0], [87.7, 22731.0], [87.8, 22731.0], [87.9, 22731.0], [88.0, 23049.0], [88.1, 23049.0], [88.2, 23049.0], [88.3, 23049.0], [88.4, 23049.0], [88.5, 23049.0], [88.6, 23049.0], [88.7, 23049.0], [88.8, 23049.0], [88.9, 23049.0], [89.0, 23705.0], [89.1, 23705.0], [89.2, 23705.0], [89.3, 23705.0], [89.4, 23705.0], [89.5, 23705.0], [89.6, 23705.0], [89.7, 23705.0], [89.8, 23705.0], [89.9, 23705.0], [90.0, 24057.0], [90.1, 24057.0], [90.2, 24057.0], [90.3, 24057.0], [90.4, 24057.0], [90.5, 24057.0], [90.6, 24057.0], [90.7, 24057.0], [90.8, 24057.0], [90.9, 24057.0], [91.0, 24692.0], [91.1, 24692.0], [91.2, 24692.0], [91.3, 24692.0], [91.4, 24692.0], [91.5, 24692.0], [91.6, 24692.0], [91.7, 24692.0], [91.8, 24692.0], [91.9, 24692.0], [92.0, 25007.0], [92.1, 25007.0], [92.2, 25007.0], [92.3, 25007.0], [92.4, 25007.0], [92.5, 25007.0], [92.6, 25007.0], [92.7, 25007.0], [92.8, 25007.0], [92.9, 25007.0], [93.0, 25416.0], [93.1, 25416.0], [93.2, 25416.0], [93.3, 25416.0], [93.4, 25416.0], [93.5, 25416.0], [93.6, 25416.0], [93.7, 25416.0], [93.8, 25416.0], [93.9, 25416.0], [94.0, 25814.0], [94.1, 25814.0], [94.2, 25814.0], [94.3, 25814.0], [94.4, 25814.0], [94.5, 25814.0], [94.6, 25814.0], [94.7, 25814.0], [94.8, 25814.0], [94.9, 25814.0], [95.0, 26814.0], [95.1, 26814.0], [95.2, 26814.0], [95.3, 26814.0], [95.4, 26814.0], [95.5, 26814.0], [95.6, 26814.0], [95.7, 26814.0], [95.8, 26814.0], [95.9, 26814.0], [96.0, 27953.0], [96.1, 27953.0], [96.2, 27953.0], [96.3, 27953.0], [96.4, 27953.0], [96.5, 27953.0], [96.6, 27953.0], [96.7, 27953.0], [96.8, 27953.0], [96.9, 27953.0], [97.0, 35111.0], [97.1, 35111.0], [97.2, 35111.0], [97.3, 35111.0], [97.4, 35111.0], [97.5, 35111.0], [97.6, 35111.0], [97.7, 35111.0], [97.8, 35111.0], [97.9, 35111.0], [98.0, 37653.0], [98.1, 37653.0], [98.2, 37653.0], [98.3, 37653.0], [98.4, 37653.0], [98.5, 37653.0], [98.6, 37653.0], [98.7, 37653.0], [98.8, 37653.0], [98.9, 37653.0], [99.0, 54312.0], [99.1, 54312.0], [99.2, 54312.0], [99.3, 54312.0], [99.4, 54312.0], [99.5, 54312.0], [99.6, 54312.0], [99.7, 54312.0], [99.8, 54312.0], [99.9, 54312.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 66.0], [0.1, 66.0], [0.2, 66.0], [0.3, 66.0], [0.4, 66.0], [0.5, 66.0], [0.6, 66.0], [0.7, 66.0], [0.8, 66.0], [0.9, 66.0], [1.0, 71.0], [1.1, 71.0], [1.2, 71.0], [1.3, 71.0], [1.4, 71.0], [1.5, 71.0], [1.6, 71.0], [1.7, 71.0], [1.8, 71.0], [1.9, 71.0], [2.0, 74.0], [2.1, 74.0], [2.2, 74.0], [2.3, 74.0], [2.4, 74.0], [2.5, 74.0], [2.6, 74.0], [2.7, 74.0], [2.8, 74.0], [2.9, 74.0], [3.0, 75.0], [3.1, 75.0], [3.2, 75.0], [3.3, 75.0], [3.4, 75.0], [3.5, 75.0], [3.6, 75.0], [3.7, 75.0], [3.8, 75.0], [3.9, 75.0], [4.0, 78.0], [4.1, 78.0], [4.2, 78.0], [4.3, 78.0], [4.4, 78.0], [4.5, 78.0], [4.6, 78.0], [4.7, 78.0], [4.8, 78.0], [4.9, 78.0], [5.0, 80.0], [5.1, 80.0], [5.2, 80.0], [5.3, 80.0], [5.4, 80.0], [5.5, 80.0], [5.6, 80.0], [5.7, 80.0], [5.8, 80.0], [5.9, 80.0], [6.0, 81.0], [6.1, 81.0], [6.2, 81.0], [6.3, 81.0], [6.4, 81.0], [6.5, 81.0], [6.6, 81.0], [6.7, 81.0], [6.8, 81.0], [6.9, 81.0], [7.0, 83.0], [7.1, 83.0], [7.2, 83.0], [7.3, 83.0], [7.4, 83.0], [7.5, 83.0], [7.6, 83.0], [7.7, 83.0], [7.8, 83.0], [7.9, 83.0], [8.0, 89.0], [8.1, 89.0], [8.2, 89.0], [8.3, 89.0], [8.4, 89.0], [8.5, 89.0], [8.6, 89.0], [8.7, 89.0], [8.8, 89.0], [8.9, 89.0], [9.0, 93.0], [9.1, 93.0], [9.2, 93.0], [9.3, 93.0], [9.4, 93.0], [9.5, 93.0], [9.6, 93.0], [9.7, 93.0], [9.8, 93.0], [9.9, 93.0], [10.0, 98.0], [10.1, 98.0], [10.2, 98.0], [10.3, 98.0], [10.4, 98.0], [10.5, 98.0], [10.6, 98.0], [10.7, 98.0], [10.8, 98.0], [10.9, 98.0], [11.0, 98.0], [11.1, 98.0], [11.2, 98.0], [11.3, 98.0], [11.4, 98.0], [11.5, 98.0], [11.6, 98.0], [11.7, 98.0], [11.8, 98.0], [11.9, 98.0], [12.0, 100.0], [12.1, 100.0], [12.2, 100.0], [12.3, 100.0], [12.4, 100.0], [12.5, 100.0], [12.6, 100.0], [12.7, 100.0], [12.8, 100.0], [12.9, 100.0], [13.0, 111.0], [13.1, 111.0], [13.2, 111.0], [13.3, 111.0], [13.4, 111.0], [13.5, 111.0], [13.6, 111.0], [13.7, 111.0], [13.8, 111.0], [13.9, 111.0], [14.0, 113.0], [14.1, 113.0], [14.2, 113.0], [14.3, 113.0], [14.4, 113.0], [14.5, 113.0], [14.6, 113.0], [14.7, 113.0], [14.8, 113.0], [14.9, 113.0], [15.0, 117.0], [15.1, 117.0], [15.2, 117.0], [15.3, 117.0], [15.4, 117.0], [15.5, 117.0], [15.6, 117.0], [15.7, 117.0], [15.8, 117.0], [15.9, 117.0], [16.0, 121.0], [16.1, 121.0], [16.2, 121.0], [16.3, 121.0], [16.4, 121.0], [16.5, 121.0], [16.6, 121.0], [16.7, 121.0], [16.8, 121.0], [16.9, 121.0], [17.0, 134.0], [17.1, 134.0], [17.2, 134.0], [17.3, 134.0], [17.4, 134.0], [17.5, 134.0], [17.6, 134.0], [17.7, 134.0], [17.8, 134.0], [17.9, 134.0], [18.0, 139.0], [18.1, 139.0], [18.2, 139.0], [18.3, 139.0], [18.4, 139.0], [18.5, 139.0], [18.6, 139.0], [18.7, 139.0], [18.8, 139.0], [18.9, 139.0], [19.0, 141.0], [19.1, 141.0], [19.2, 141.0], [19.3, 141.0], [19.4, 141.0], [19.5, 141.0], [19.6, 141.0], [19.7, 141.0], [19.8, 141.0], [19.9, 141.0], [20.0, 145.0], [20.1, 145.0], [20.2, 145.0], [20.3, 145.0], [20.4, 145.0], [20.5, 145.0], [20.6, 145.0], [20.7, 145.0], [20.8, 145.0], [20.9, 145.0], [21.0, 147.0], [21.1, 147.0], [21.2, 147.0], [21.3, 147.0], [21.4, 147.0], [21.5, 147.0], [21.6, 147.0], [21.7, 147.0], [21.8, 147.0], [21.9, 147.0], [22.0, 149.0], [22.1, 149.0], [22.2, 149.0], [22.3, 149.0], [22.4, 149.0], [22.5, 149.0], [22.6, 149.0], [22.7, 149.0], [22.8, 149.0], [22.9, 149.0], [23.0, 150.0], [23.1, 150.0], [23.2, 150.0], [23.3, 150.0], [23.4, 150.0], [23.5, 150.0], [23.6, 150.0], [23.7, 150.0], [23.8, 150.0], [23.9, 150.0], [24.0, 151.0], [24.1, 151.0], [24.2, 151.0], [24.3, 151.0], [24.4, 151.0], [24.5, 151.0], [24.6, 151.0], [24.7, 151.0], [24.8, 151.0], [24.9, 151.0], [25.0, 151.0], [25.1, 151.0], [25.2, 151.0], [25.3, 151.0], [25.4, 151.0], [25.5, 151.0], [25.6, 151.0], [25.7, 151.0], [25.8, 151.0], [25.9, 151.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 153.0], [26.6, 153.0], [26.7, 153.0], [26.8, 153.0], [26.9, 153.0], [27.0, 153.0], [27.1, 153.0], [27.2, 153.0], [27.3, 153.0], [27.4, 153.0], [27.5, 153.0], [27.6, 153.0], [27.7, 153.0], [27.8, 153.0], [27.9, 153.0], [28.0, 166.0], [28.1, 166.0], [28.2, 166.0], [28.3, 166.0], [28.4, 166.0], [28.5, 166.0], [28.6, 166.0], [28.7, 166.0], [28.8, 166.0], [28.9, 166.0], [29.0, 173.0], [29.1, 173.0], [29.2, 173.0], [29.3, 173.0], [29.4, 173.0], [29.5, 173.0], [29.6, 173.0], [29.7, 173.0], [29.8, 173.0], [29.9, 173.0], [30.0, 174.0], [30.1, 174.0], [30.2, 174.0], [30.3, 174.0], [30.4, 174.0], [30.5, 174.0], [30.6, 174.0], [30.7, 174.0], [30.8, 174.0], [30.9, 174.0], [31.0, 175.0], [31.1, 175.0], [31.2, 175.0], [31.3, 175.0], [31.4, 175.0], [31.5, 175.0], [31.6, 175.0], [31.7, 175.0], [31.8, 175.0], [31.9, 175.0], [32.0, 178.0], [32.1, 178.0], [32.2, 178.0], [32.3, 178.0], [32.4, 178.0], [32.5, 178.0], [32.6, 178.0], [32.7, 178.0], [32.8, 178.0], [32.9, 178.0], [33.0, 190.0], [33.1, 190.0], [33.2, 190.0], [33.3, 190.0], [33.4, 190.0], [33.5, 190.0], [33.6, 190.0], [33.7, 190.0], [33.8, 190.0], [33.9, 190.0], [34.0, 191.0], [34.1, 191.0], [34.2, 191.0], [34.3, 191.0], [34.4, 191.0], [34.5, 191.0], [34.6, 191.0], [34.7, 191.0], [34.8, 191.0], [34.9, 191.0], [35.0, 191.0], [35.1, 191.0], [35.2, 191.0], [35.3, 191.0], [35.4, 191.0], [35.5, 191.0], [35.6, 191.0], [35.7, 191.0], [35.8, 191.0], [35.9, 191.0], [36.0, 197.0], [36.1, 197.0], [36.2, 197.0], [36.3, 197.0], [36.4, 197.0], [36.5, 197.0], [36.6, 197.0], [36.7, 197.0], [36.8, 197.0], [36.9, 197.0], [37.0, 201.0], [37.1, 201.0], [37.2, 201.0], [37.3, 201.0], [37.4, 201.0], [37.5, 201.0], [37.6, 201.0], [37.7, 201.0], [37.8, 201.0], [37.9, 201.0], [38.0, 203.0], [38.1, 203.0], [38.2, 203.0], [38.3, 203.0], [38.4, 203.0], [38.5, 203.0], [38.6, 203.0], [38.7, 203.0], [38.8, 203.0], [38.9, 203.0], [39.0, 205.0], [39.1, 205.0], [39.2, 205.0], [39.3, 205.0], [39.4, 205.0], [39.5, 205.0], [39.6, 205.0], [39.7, 205.0], [39.8, 205.0], [39.9, 205.0], [40.0, 211.0], [40.1, 211.0], [40.2, 211.0], [40.3, 211.0], [40.4, 211.0], [40.5, 211.0], [40.6, 211.0], [40.7, 211.0], [40.8, 211.0], [40.9, 211.0], [41.0, 213.0], [41.1, 213.0], [41.2, 213.0], [41.3, 213.0], [41.4, 213.0], [41.5, 213.0], [41.6, 213.0], [41.7, 213.0], [41.8, 213.0], [41.9, 213.0], [42.0, 223.0], [42.1, 223.0], [42.2, 223.0], [42.3, 223.0], [42.4, 223.0], [42.5, 223.0], [42.6, 223.0], [42.7, 223.0], [42.8, 223.0], [42.9, 223.0], [43.0, 258.0], [43.1, 258.0], [43.2, 258.0], [43.3, 258.0], [43.4, 258.0], [43.5, 258.0], [43.6, 258.0], [43.7, 258.0], [43.8, 258.0], [43.9, 258.0], [44.0, 289.0], [44.1, 289.0], [44.2, 289.0], [44.3, 289.0], [44.4, 289.0], [44.5, 289.0], [44.6, 289.0], [44.7, 289.0], [44.8, 289.0], [44.9, 289.0], [45.0, 316.0], [45.1, 316.0], [45.2, 316.0], [45.3, 316.0], [45.4, 316.0], [45.5, 316.0], [45.6, 316.0], [45.7, 316.0], [45.8, 316.0], [45.9, 316.0], [46.0, 320.0], [46.1, 320.0], [46.2, 320.0], [46.3, 320.0], [46.4, 320.0], [46.5, 320.0], [46.6, 320.0], [46.7, 320.0], [46.8, 320.0], [46.9, 320.0], [47.0, 356.0], [47.1, 356.0], [47.2, 356.0], [47.3, 356.0], [47.4, 356.0], [47.5, 356.0], [47.6, 356.0], [47.7, 356.0], [47.8, 356.0], [47.9, 356.0], [48.0, 381.0], [48.1, 381.0], [48.2, 381.0], [48.3, 381.0], [48.4, 381.0], [48.5, 381.0], [48.6, 381.0], [48.7, 381.0], [48.8, 381.0], [48.9, 381.0], [49.0, 423.0], [49.1, 423.0], [49.2, 423.0], [49.3, 423.0], [49.4, 423.0], [49.5, 423.0], [49.6, 423.0], [49.7, 423.0], [49.8, 423.0], [49.9, 423.0], [50.0, 447.0], [50.1, 447.0], [50.2, 447.0], [50.3, 447.0], [50.4, 447.0], [50.5, 447.0], [50.6, 447.0], [50.7, 447.0], [50.8, 447.0], [50.9, 447.0], [51.0, 456.0], [51.1, 456.0], [51.2, 456.0], [51.3, 456.0], [51.4, 456.0], [51.5, 456.0], [51.6, 456.0], [51.7, 456.0], [51.8, 456.0], [51.9, 456.0], [52.0, 472.0], [52.1, 472.0], [52.2, 472.0], [52.3, 472.0], [52.4, 472.0], [52.5, 472.0], [52.6, 472.0], [52.7, 472.0], [52.8, 472.0], [52.9, 472.0], [53.0, 571.0], [53.1, 571.0], [53.2, 571.0], [53.3, 571.0], [53.4, 571.0], [53.5, 571.0], [53.6, 571.0], [53.7, 571.0], [53.8, 571.0], [53.9, 571.0], [54.0, 578.0], [54.1, 578.0], [54.2, 578.0], [54.3, 578.0], [54.4, 578.0], [54.5, 578.0], [54.6, 578.0], [54.7, 578.0], [54.8, 578.0], [54.9, 578.0], [55.0, 643.0], [55.1, 643.0], [55.2, 643.0], [55.3, 643.0], [55.4, 643.0], [55.5, 643.0], [55.6, 643.0], [55.7, 643.0], [55.8, 643.0], [55.9, 643.0], [56.0, 648.0], [56.1, 648.0], [56.2, 648.0], [56.3, 648.0], [56.4, 648.0], [56.5, 648.0], [56.6, 648.0], [56.7, 648.0], [56.8, 648.0], [56.9, 648.0], [57.0, 732.0], [57.1, 732.0], [57.2, 732.0], [57.3, 732.0], [57.4, 732.0], [57.5, 732.0], [57.6, 732.0], [57.7, 732.0], [57.8, 732.0], [57.9, 732.0], [58.0, 806.0], [58.1, 806.0], [58.2, 806.0], [58.3, 806.0], [58.4, 806.0], [58.5, 806.0], [58.6, 806.0], [58.7, 806.0], [58.8, 806.0], [58.9, 806.0], [59.0, 820.0], [59.1, 820.0], [59.2, 820.0], [59.3, 820.0], [59.4, 820.0], [59.5, 820.0], [59.6, 820.0], [59.7, 820.0], [59.8, 820.0], [59.9, 820.0], [60.0, 847.0], [60.1, 847.0], [60.2, 847.0], [60.3, 847.0], [60.4, 847.0], [60.5, 847.0], [60.6, 847.0], [60.7, 847.0], [60.8, 847.0], [60.9, 847.0], [61.0, 868.0], [61.1, 868.0], [61.2, 868.0], [61.3, 868.0], [61.4, 868.0], [61.5, 868.0], [61.6, 868.0], [61.7, 868.0], [61.8, 868.0], [61.9, 868.0], [62.0, 890.0], [62.1, 890.0], [62.2, 890.0], [62.3, 890.0], [62.4, 890.0], [62.5, 890.0], [62.6, 890.0], [62.7, 890.0], [62.8, 890.0], [62.9, 890.0], [63.0, 914.0], [63.1, 914.0], [63.2, 914.0], [63.3, 914.0], [63.4, 914.0], [63.5, 914.0], [63.6, 914.0], [63.7, 914.0], [63.8, 914.0], [63.9, 914.0], [64.0, 933.0], [64.1, 933.0], [64.2, 933.0], [64.3, 933.0], [64.4, 933.0], [64.5, 933.0], [64.6, 933.0], [64.7, 933.0], [64.8, 933.0], [64.9, 933.0], [65.0, 952.0], [65.1, 952.0], [65.2, 952.0], [65.3, 952.0], [65.4, 952.0], [65.5, 952.0], [65.6, 952.0], [65.7, 952.0], [65.8, 952.0], [65.9, 952.0], [66.0, 957.0], [66.1, 957.0], [66.2, 957.0], [66.3, 957.0], [66.4, 957.0], [66.5, 957.0], [66.6, 957.0], [66.7, 957.0], [66.8, 957.0], [66.9, 957.0], [67.0, 1000.0], [67.1, 1000.0], [67.2, 1000.0], [67.3, 1000.0], [67.4, 1000.0], [67.5, 1000.0], [67.6, 1000.0], [67.7, 1000.0], [67.8, 1000.0], [67.9, 1000.0], [68.0, 1033.0], [68.1, 1033.0], [68.2, 1033.0], [68.3, 1033.0], [68.4, 1033.0], [68.5, 1033.0], [68.6, 1033.0], [68.7, 1033.0], [68.8, 1033.0], [68.9, 1033.0], [69.0, 1164.0], [69.1, 1164.0], [69.2, 1164.0], [69.3, 1164.0], [69.4, 1164.0], [69.5, 1164.0], [69.6, 1164.0], [69.7, 1164.0], [69.8, 1164.0], [69.9, 1164.0], [70.0, 1183.0], [70.1, 1183.0], [70.2, 1183.0], [70.3, 1183.0], [70.4, 1183.0], [70.5, 1183.0], [70.6, 1183.0], [70.7, 1183.0], [70.8, 1183.0], [70.9, 1183.0], [71.0, 1281.0], [71.1, 1281.0], [71.2, 1281.0], [71.3, 1281.0], [71.4, 1281.0], [71.5, 1281.0], [71.6, 1281.0], [71.7, 1281.0], [71.8, 1281.0], [71.9, 1281.0], [72.0, 1328.0], [72.1, 1328.0], [72.2, 1328.0], [72.3, 1328.0], [72.4, 1328.0], [72.5, 1328.0], [72.6, 1328.0], [72.7, 1328.0], [72.8, 1328.0], [72.9, 1328.0], [73.0, 1372.0], [73.1, 1372.0], [73.2, 1372.0], [73.3, 1372.0], [73.4, 1372.0], [73.5, 1372.0], [73.6, 1372.0], [73.7, 1372.0], [73.8, 1372.0], [73.9, 1372.0], [74.0, 1435.0], [74.1, 1435.0], [74.2, 1435.0], [74.3, 1435.0], [74.4, 1435.0], [74.5, 1435.0], [74.6, 1435.0], [74.7, 1435.0], [74.8, 1435.0], [74.9, 1435.0], [75.0, 1512.0], [75.1, 1512.0], [75.2, 1512.0], [75.3, 1512.0], [75.4, 1512.0], [75.5, 1512.0], [75.6, 1512.0], [75.7, 1512.0], [75.8, 1512.0], [75.9, 1512.0], [76.0, 1627.0], [76.1, 1627.0], [76.2, 1627.0], [76.3, 1627.0], [76.4, 1627.0], [76.5, 1627.0], [76.6, 1627.0], [76.7, 1627.0], [76.8, 1627.0], [76.9, 1627.0], [77.0, 1666.0], [77.1, 1666.0], [77.2, 1666.0], [77.3, 1666.0], [77.4, 1666.0], [77.5, 1666.0], [77.6, 1666.0], [77.7, 1666.0], [77.8, 1666.0], [77.9, 1666.0], [78.0, 1678.0], [78.1, 1678.0], [78.2, 1678.0], [78.3, 1678.0], [78.4, 1678.0], [78.5, 1678.0], [78.6, 1678.0], [78.7, 1678.0], [78.8, 1678.0], [78.9, 1678.0], [79.0, 1685.0], [79.1, 1685.0], [79.2, 1685.0], [79.3, 1685.0], [79.4, 1685.0], [79.5, 1685.0], [79.6, 1685.0], [79.7, 1685.0], [79.8, 1685.0], [79.9, 1685.0], [80.0, 2083.0], [80.1, 2083.0], [80.2, 2083.0], [80.3, 2083.0], [80.4, 2083.0], [80.5, 2083.0], [80.6, 2083.0], [80.7, 2083.0], [80.8, 2083.0], [80.9, 2083.0], [81.0, 2087.0], [81.1, 2087.0], [81.2, 2087.0], [81.3, 2087.0], [81.4, 2087.0], [81.5, 2087.0], [81.6, 2087.0], [81.7, 2087.0], [81.8, 2087.0], [81.9, 2087.0], [82.0, 2111.0], [82.1, 2111.0], [82.2, 2111.0], [82.3, 2111.0], [82.4, 2111.0], [82.5, 2111.0], [82.6, 2111.0], [82.7, 2111.0], [82.8, 2111.0], [82.9, 2111.0], [83.0, 2169.0], [83.1, 2169.0], [83.2, 2169.0], [83.3, 2169.0], [83.4, 2169.0], [83.5, 2169.0], [83.6, 2169.0], [83.7, 2169.0], [83.8, 2169.0], [83.9, 2169.0], [84.0, 2202.0], [84.1, 2202.0], [84.2, 2202.0], [84.3, 2202.0], [84.4, 2202.0], [84.5, 2202.0], [84.6, 2202.0], [84.7, 2202.0], [84.8, 2202.0], [84.9, 2202.0], [85.0, 2276.0], [85.1, 2276.0], [85.2, 2276.0], [85.3, 2276.0], [85.4, 2276.0], [85.5, 2276.0], [85.6, 2276.0], [85.7, 2276.0], [85.8, 2276.0], [85.9, 2276.0], [86.0, 2308.0], [86.1, 2308.0], [86.2, 2308.0], [86.3, 2308.0], [86.4, 2308.0], [86.5, 2308.0], [86.6, 2308.0], [86.7, 2308.0], [86.8, 2308.0], [86.9, 2308.0], [87.0, 2323.0], [87.1, 2323.0], [87.2, 2323.0], [87.3, 2323.0], [87.4, 2323.0], [87.5, 2323.0], [87.6, 2323.0], [87.7, 2323.0], [87.8, 2323.0], [87.9, 2323.0], [88.0, 2535.0], [88.1, 2535.0], [88.2, 2535.0], [88.3, 2535.0], [88.4, 2535.0], [88.5, 2535.0], [88.6, 2535.0], [88.7, 2535.0], [88.8, 2535.0], [88.9, 2535.0], [89.0, 2663.0], [89.1, 2663.0], [89.2, 2663.0], [89.3, 2663.0], [89.4, 2663.0], [89.5, 2663.0], [89.6, 2663.0], [89.7, 2663.0], [89.8, 2663.0], [89.9, 2663.0], [90.0, 2671.0], [90.1, 2671.0], [90.2, 2671.0], [90.3, 2671.0], [90.4, 2671.0], [90.5, 2671.0], [90.6, 2671.0], [90.7, 2671.0], [90.8, 2671.0], [90.9, 2671.0], [91.0, 2695.0], [91.1, 2695.0], [91.2, 2695.0], [91.3, 2695.0], [91.4, 2695.0], [91.5, 2695.0], [91.6, 2695.0], [91.7, 2695.0], [91.8, 2695.0], [91.9, 2695.0], [92.0, 3355.0], [92.1, 3355.0], [92.2, 3355.0], [92.3, 3355.0], [92.4, 3355.0], [92.5, 3355.0], [92.6, 3355.0], [92.7, 3355.0], [92.8, 3355.0], [92.9, 3355.0], [93.0, 3387.0], [93.1, 3387.0], [93.2, 3387.0], [93.3, 3387.0], [93.4, 3387.0], [93.5, 3387.0], [93.6, 3387.0], [93.7, 3387.0], [93.8, 3387.0], [93.9, 3387.0], [94.0, 3546.0], [94.1, 3546.0], [94.2, 3546.0], [94.3, 3546.0], [94.4, 3546.0], [94.5, 3546.0], [94.6, 3546.0], [94.7, 3546.0], [94.8, 3546.0], [94.9, 3546.0], [95.0, 3809.0], [95.1, 3809.0], [95.2, 3809.0], [95.3, 3809.0], [95.4, 3809.0], [95.5, 3809.0], [95.6, 3809.0], [95.7, 3809.0], [95.8, 3809.0], [95.9, 3809.0], [96.0, 4389.0], [96.1, 4389.0], [96.2, 4389.0], [96.3, 4389.0], [96.4, 4389.0], [96.5, 4389.0], [96.6, 4389.0], [96.7, 4389.0], [96.8, 4389.0], [96.9, 4389.0], [97.0, 4447.0], [97.1, 4447.0], [97.2, 4447.0], [97.3, 4447.0], [97.4, 4447.0], [97.5, 4447.0], [97.6, 4447.0], [97.7, 4447.0], [97.8, 4447.0], [97.9, 4447.0], [98.0, 5070.0], [98.1, 5070.0], [98.2, 5070.0], [98.3, 5070.0], [98.4, 5070.0], [98.5, 5070.0], [98.6, 5070.0], [98.7, 5070.0], [98.8, 5070.0], [98.9, 5070.0], [99.0, 5169.0], [99.1, 5169.0], [99.2, 5169.0], [99.3, 5169.0], [99.4, 5169.0], [99.5, 5169.0], [99.6, 5169.0], [99.7, 5169.0], [99.8, 5169.0], [99.9, 5169.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 512.0], [0.1, 512.0], [0.2, 512.0], [0.3, 512.0], [0.4, 512.0], [0.5, 512.0], [0.6, 512.0], [0.7, 512.0], [0.8, 512.0], [0.9, 512.0], [1.0, 636.0], [1.1, 636.0], [1.2, 636.0], [1.3, 636.0], [1.4, 636.0], [1.5, 636.0], [1.6, 636.0], [1.7, 636.0], [1.8, 636.0], [1.9, 636.0], [2.0, 896.0], [2.1, 896.0], [2.2, 896.0], [2.3, 896.0], [2.4, 896.0], [2.5, 896.0], [2.6, 896.0], [2.7, 896.0], [2.8, 896.0], [2.9, 896.0], [3.0, 993.0], [3.1, 993.0], [3.2, 993.0], [3.3, 993.0], [3.4, 993.0], [3.5, 993.0], [3.6, 993.0], [3.7, 993.0], [3.8, 993.0], [3.9, 993.0], [4.0, 1066.0], [4.1, 1066.0], [4.2, 1066.0], [4.3, 1066.0], [4.4, 1066.0], [4.5, 1066.0], [4.6, 1066.0], [4.7, 1066.0], [4.8, 1066.0], [4.9, 1066.0], [5.0, 1114.0], [5.1, 1114.0], [5.2, 1114.0], [5.3, 1114.0], [5.4, 1114.0], [5.5, 1114.0], [5.6, 1114.0], [5.7, 1114.0], [5.8, 1114.0], [5.9, 1114.0], [6.0, 1159.0], [6.1, 1159.0], [6.2, 1159.0], [6.3, 1159.0], [6.4, 1159.0], [6.5, 1159.0], [6.6, 1159.0], [6.7, 1159.0], [6.8, 1159.0], [6.9, 1159.0], [7.0, 1342.0], [7.1, 1342.0], [7.2, 1342.0], [7.3, 1342.0], [7.4, 1342.0], [7.5, 1342.0], [7.6, 1342.0], [7.7, 1342.0], [7.8, 1342.0], [7.9, 1342.0], [8.0, 1413.0], [8.1, 1413.0], [8.2, 1413.0], [8.3, 1413.0], [8.4, 1413.0], [8.5, 1413.0], [8.6, 1413.0], [8.7, 1413.0], [8.8, 1413.0], [8.9, 1413.0], [9.0, 1541.0], [9.1, 1541.0], [9.2, 1541.0], [9.3, 1541.0], [9.4, 1541.0], [9.5, 1541.0], [9.6, 1541.0], [9.7, 1541.0], [9.8, 1541.0], [9.9, 1541.0], [10.0, 1647.0], [10.1, 1647.0], [10.2, 1647.0], [10.3, 1647.0], [10.4, 1647.0], [10.5, 1647.0], [10.6, 1647.0], [10.7, 1647.0], [10.8, 1647.0], [10.9, 1647.0], [11.0, 1656.0], [11.1, 1656.0], [11.2, 1656.0], [11.3, 1656.0], [11.4, 1656.0], [11.5, 1656.0], [11.6, 1656.0], [11.7, 1656.0], [11.8, 1656.0], [11.9, 1656.0], [12.0, 1746.0], [12.1, 1746.0], [12.2, 1746.0], [12.3, 1746.0], [12.4, 1746.0], [12.5, 1746.0], [12.6, 1746.0], [12.7, 1746.0], [12.8, 1746.0], [12.9, 1746.0], [13.0, 1846.0], [13.1, 1846.0], [13.2, 1846.0], [13.3, 1846.0], [13.4, 1846.0], [13.5, 1846.0], [13.6, 1846.0], [13.7, 1846.0], [13.8, 1846.0], [13.9, 1846.0], [14.0, 1879.0], [14.1, 1879.0], [14.2, 1879.0], [14.3, 1879.0], [14.4, 1879.0], [14.5, 1879.0], [14.6, 1879.0], [14.7, 1879.0], [14.8, 1879.0], [14.9, 1879.0], [15.0, 2018.0], [15.1, 2018.0], [15.2, 2018.0], [15.3, 2018.0], [15.4, 2018.0], [15.5, 2018.0], [15.6, 2018.0], [15.7, 2018.0], [15.8, 2018.0], [15.9, 2018.0], [16.0, 2091.0], [16.1, 2091.0], [16.2, 2091.0], [16.3, 2091.0], [16.4, 2091.0], [16.5, 2091.0], [16.6, 2091.0], [16.7, 2091.0], [16.8, 2091.0], [16.9, 2091.0], [17.0, 2391.0], [17.1, 2391.0], [17.2, 2391.0], [17.3, 2391.0], [17.4, 2391.0], [17.5, 2391.0], [17.6, 2391.0], [17.7, 2391.0], [17.8, 2391.0], [17.9, 2391.0], [18.0, 2425.0], [18.1, 2425.0], [18.2, 2425.0], [18.3, 2425.0], [18.4, 2425.0], [18.5, 2425.0], [18.6, 2425.0], [18.7, 2425.0], [18.8, 2425.0], [18.9, 2425.0], [19.0, 2486.0], [19.1, 2486.0], [19.2, 2486.0], [19.3, 2486.0], [19.4, 2486.0], [19.5, 2486.0], [19.6, 2486.0], [19.7, 2486.0], [19.8, 2486.0], [19.9, 2486.0], [20.0, 2544.0], [20.1, 2544.0], [20.2, 2544.0], [20.3, 2544.0], [20.4, 2544.0], [20.5, 2544.0], [20.6, 2544.0], [20.7, 2544.0], [20.8, 2544.0], [20.9, 2544.0], [21.0, 2660.0], [21.1, 2660.0], [21.2, 2660.0], [21.3, 2660.0], [21.4, 2660.0], [21.5, 2660.0], [21.6, 2660.0], [21.7, 2660.0], [21.8, 2660.0], [21.9, 2660.0], [22.0, 2736.0], [22.1, 2736.0], [22.2, 2736.0], [22.3, 2736.0], [22.4, 2736.0], [22.5, 2736.0], [22.6, 2736.0], [22.7, 2736.0], [22.8, 2736.0], [22.9, 2736.0], [23.0, 2996.0], [23.1, 2996.0], [23.2, 2996.0], [23.3, 2996.0], [23.4, 2996.0], [23.5, 2996.0], [23.6, 2996.0], [23.7, 2996.0], [23.8, 2996.0], [23.9, 2996.0], [24.0, 3177.0], [24.1, 3177.0], [24.2, 3177.0], [24.3, 3177.0], [24.4, 3177.0], [24.5, 3177.0], [24.6, 3177.0], [24.7, 3177.0], [24.8, 3177.0], [24.9, 3177.0], [25.0, 3639.0], [25.1, 3639.0], [25.2, 3639.0], [25.3, 3639.0], [25.4, 3639.0], [25.5, 3639.0], [25.6, 3639.0], [25.7, 3639.0], [25.8, 3639.0], [25.9, 3639.0], [26.0, 3783.0], [26.1, 3783.0], [26.2, 3783.0], [26.3, 3783.0], [26.4, 3783.0], [26.5, 3783.0], [26.6, 3783.0], [26.7, 3783.0], [26.8, 3783.0], [26.9, 3783.0], [27.0, 3854.0], [27.1, 3854.0], [27.2, 3854.0], [27.3, 3854.0], [27.4, 3854.0], [27.5, 3854.0], [27.6, 3854.0], [27.7, 3854.0], [27.8, 3854.0], [27.9, 3854.0], [28.0, 3905.0], [28.1, 3905.0], [28.2, 3905.0], [28.3, 3905.0], [28.4, 3905.0], [28.5, 3905.0], [28.6, 3905.0], [28.7, 3905.0], [28.8, 3905.0], [28.9, 3905.0], [29.0, 3995.0], [29.1, 3995.0], [29.2, 3995.0], [29.3, 3995.0], [29.4, 3995.0], [29.5, 3995.0], [29.6, 3995.0], [29.7, 3995.0], [29.8, 3995.0], [29.9, 3995.0], [30.0, 4123.0], [30.1, 4123.0], [30.2, 4123.0], [30.3, 4123.0], [30.4, 4123.0], [30.5, 4123.0], [30.6, 4123.0], [30.7, 4123.0], [30.8, 4123.0], [30.9, 4123.0], [31.0, 4190.0], [31.1, 4190.0], [31.2, 4190.0], [31.3, 4190.0], [31.4, 4190.0], [31.5, 4190.0], [31.6, 4190.0], [31.7, 4190.0], [31.8, 4190.0], [31.9, 4190.0], [32.0, 4194.0], [32.1, 4194.0], [32.2, 4194.0], [32.3, 4194.0], [32.4, 4194.0], [32.5, 4194.0], [32.6, 4194.0], [32.7, 4194.0], [32.8, 4194.0], [32.9, 4194.0], [33.0, 4363.0], [33.1, 4363.0], [33.2, 4363.0], [33.3, 4363.0], [33.4, 4363.0], [33.5, 4363.0], [33.6, 4363.0], [33.7, 4363.0], [33.8, 4363.0], [33.9, 4363.0], [34.0, 4417.0], [34.1, 4417.0], [34.2, 4417.0], [34.3, 4417.0], [34.4, 4417.0], [34.5, 4417.0], [34.6, 4417.0], [34.7, 4417.0], [34.8, 4417.0], [34.9, 4417.0], [35.0, 4441.0], [35.1, 4441.0], [35.2, 4441.0], [35.3, 4441.0], [35.4, 4441.0], [35.5, 4441.0], [35.6, 4441.0], [35.7, 4441.0], [35.8, 4441.0], [35.9, 4441.0], [36.0, 4462.0], [36.1, 4462.0], [36.2, 4462.0], [36.3, 4462.0], [36.4, 4462.0], [36.5, 4462.0], [36.6, 4462.0], [36.7, 4462.0], [36.8, 4462.0], [36.9, 4462.0], [37.0, 4744.0], [37.1, 4744.0], [37.2, 4744.0], [37.3, 4744.0], [37.4, 4744.0], [37.5, 4744.0], [37.6, 4744.0], [37.7, 4744.0], [37.8, 4744.0], [37.9, 4744.0], [38.0, 4759.0], [38.1, 4759.0], [38.2, 4759.0], [38.3, 4759.0], [38.4, 4759.0], [38.5, 4759.0], [38.6, 4759.0], [38.7, 4759.0], [38.8, 4759.0], [38.9, 4759.0], [39.0, 4909.0], [39.1, 4909.0], [39.2, 4909.0], [39.3, 4909.0], [39.4, 4909.0], [39.5, 4909.0], [39.6, 4909.0], [39.7, 4909.0], [39.8, 4909.0], [39.9, 4909.0], [40.0, 4950.0], [40.1, 4950.0], [40.2, 4950.0], [40.3, 4950.0], [40.4, 4950.0], [40.5, 4950.0], [40.6, 4950.0], [40.7, 4950.0], [40.8, 4950.0], [40.9, 4950.0], [41.0, 5261.0], [41.1, 5261.0], [41.2, 5261.0], [41.3, 5261.0], [41.4, 5261.0], [41.5, 5261.0], [41.6, 5261.0], [41.7, 5261.0], [41.8, 5261.0], [41.9, 5261.0], [42.0, 5417.0], [42.1, 5417.0], [42.2, 5417.0], [42.3, 5417.0], [42.4, 5417.0], [42.5, 5417.0], [42.6, 5417.0], [42.7, 5417.0], [42.8, 5417.0], [42.9, 5417.0], [43.0, 5667.0], [43.1, 5667.0], [43.2, 5667.0], [43.3, 5667.0], [43.4, 5667.0], [43.5, 5667.0], [43.6, 5667.0], [43.7, 5667.0], [43.8, 5667.0], [43.9, 5667.0], [44.0, 5745.0], [44.1, 5745.0], [44.2, 5745.0], [44.3, 5745.0], [44.4, 5745.0], [44.5, 5745.0], [44.6, 5745.0], [44.7, 5745.0], [44.8, 5745.0], [44.9, 5745.0], [45.0, 5842.0], [45.1, 5842.0], [45.2, 5842.0], [45.3, 5842.0], [45.4, 5842.0], [45.5, 5842.0], [45.6, 5842.0], [45.7, 5842.0], [45.8, 5842.0], [45.9, 5842.0], [46.0, 6112.0], [46.1, 6112.0], [46.2, 6112.0], [46.3, 6112.0], [46.4, 6112.0], [46.5, 6112.0], [46.6, 6112.0], [46.7, 6112.0], [46.8, 6112.0], [46.9, 6112.0], [47.0, 6209.0], [47.1, 6209.0], [47.2, 6209.0], [47.3, 6209.0], [47.4, 6209.0], [47.5, 6209.0], [47.6, 6209.0], [47.7, 6209.0], [47.8, 6209.0], [47.9, 6209.0], [48.0, 6252.0], [48.1, 6252.0], [48.2, 6252.0], [48.3, 6252.0], [48.4, 6252.0], [48.5, 6252.0], [48.6, 6252.0], [48.7, 6252.0], [48.8, 6252.0], [48.9, 6252.0], [49.0, 6331.0], [49.1, 6331.0], [49.2, 6331.0], [49.3, 6331.0], [49.4, 6331.0], [49.5, 6331.0], [49.6, 6331.0], [49.7, 6331.0], [49.8, 6331.0], [49.9, 6331.0], [50.0, 6521.0], [50.1, 6521.0], [50.2, 6521.0], [50.3, 6521.0], [50.4, 6521.0], [50.5, 6521.0], [50.6, 6521.0], [50.7, 6521.0], [50.8, 6521.0], [50.9, 6521.0], [51.0, 6656.0], [51.1, 6656.0], [51.2, 6656.0], [51.3, 6656.0], [51.4, 6656.0], [51.5, 6656.0], [51.6, 6656.0], [51.7, 6656.0], [51.8, 6656.0], [51.9, 6656.0], [52.0, 6669.0], [52.1, 6669.0], [52.2, 6669.0], [52.3, 6669.0], [52.4, 6669.0], [52.5, 6669.0], [52.6, 6669.0], [52.7, 6669.0], [52.8, 6669.0], [52.9, 6669.0], [53.0, 6856.0], [53.1, 6856.0], [53.2, 6856.0], [53.3, 6856.0], [53.4, 6856.0], [53.5, 6856.0], [53.6, 6856.0], [53.7, 6856.0], [53.8, 6856.0], [53.9, 6856.0], [54.0, 7029.0], [54.1, 7029.0], [54.2, 7029.0], [54.3, 7029.0], [54.4, 7029.0], [54.5, 7029.0], [54.6, 7029.0], [54.7, 7029.0], [54.8, 7029.0], [54.9, 7029.0], [55.0, 7120.0], [55.1, 7120.0], [55.2, 7120.0], [55.3, 7120.0], [55.4, 7120.0], [55.5, 7120.0], [55.6, 7120.0], [55.7, 7120.0], [55.8, 7120.0], [55.9, 7120.0], [56.0, 7322.0], [56.1, 7322.0], [56.2, 7322.0], [56.3, 7322.0], [56.4, 7322.0], [56.5, 7322.0], [56.6, 7322.0], [56.7, 7322.0], [56.8, 7322.0], [56.9, 7322.0], [57.0, 7371.0], [57.1, 7371.0], [57.2, 7371.0], [57.3, 7371.0], [57.4, 7371.0], [57.5, 7371.0], [57.6, 7371.0], [57.7, 7371.0], [57.8, 7371.0], [57.9, 7371.0], [58.0, 7649.0], [58.1, 7649.0], [58.2, 7649.0], [58.3, 7649.0], [58.4, 7649.0], [58.5, 7649.0], [58.6, 7649.0], [58.7, 7649.0], [58.8, 7649.0], [58.9, 7649.0], [59.0, 8173.0], [59.1, 8173.0], [59.2, 8173.0], [59.3, 8173.0], [59.4, 8173.0], [59.5, 8173.0], [59.6, 8173.0], [59.7, 8173.0], [59.8, 8173.0], [59.9, 8173.0], [60.0, 8372.0], [60.1, 8372.0], [60.2, 8372.0], [60.3, 8372.0], [60.4, 8372.0], [60.5, 8372.0], [60.6, 8372.0], [60.7, 8372.0], [60.8, 8372.0], [60.9, 8372.0], [61.0, 8503.0], [61.1, 8503.0], [61.2, 8503.0], [61.3, 8503.0], [61.4, 8503.0], [61.5, 8503.0], [61.6, 8503.0], [61.7, 8503.0], [61.8, 8503.0], [61.9, 8503.0], [62.0, 9007.0], [62.1, 9007.0], [62.2, 9007.0], [62.3, 9007.0], [62.4, 9007.0], [62.5, 9007.0], [62.6, 9007.0], [62.7, 9007.0], [62.8, 9007.0], [62.9, 9007.0], [63.0, 9108.0], [63.1, 9108.0], [63.2, 9108.0], [63.3, 9108.0], [63.4, 9108.0], [63.5, 9108.0], [63.6, 9108.0], [63.7, 9108.0], [63.8, 9108.0], [63.9, 9108.0], [64.0, 9116.0], [64.1, 9116.0], [64.2, 9116.0], [64.3, 9116.0], [64.4, 9116.0], [64.5, 9116.0], [64.6, 9116.0], [64.7, 9116.0], [64.8, 9116.0], [64.9, 9116.0], [65.0, 9178.0], [65.1, 9178.0], [65.2, 9178.0], [65.3, 9178.0], [65.4, 9178.0], [65.5, 9178.0], [65.6, 9178.0], [65.7, 9178.0], [65.8, 9178.0], [65.9, 9178.0], [66.0, 9311.0], [66.1, 9311.0], [66.2, 9311.0], [66.3, 9311.0], [66.4, 9311.0], [66.5, 9311.0], [66.6, 9311.0], [66.7, 9311.0], [66.8, 9311.0], [66.9, 9311.0], [67.0, 9549.0], [67.1, 9549.0], [67.2, 9549.0], [67.3, 9549.0], [67.4, 9549.0], [67.5, 9549.0], [67.6, 9549.0], [67.7, 9549.0], [67.8, 9549.0], [67.9, 9549.0], [68.0, 9891.0], [68.1, 9891.0], [68.2, 9891.0], [68.3, 9891.0], [68.4, 9891.0], [68.5, 9891.0], [68.6, 9891.0], [68.7, 9891.0], [68.8, 9891.0], [68.9, 9891.0], [69.0, 10446.0], [69.1, 10446.0], [69.2, 10446.0], [69.3, 10446.0], [69.4, 10446.0], [69.5, 10446.0], [69.6, 10446.0], [69.7, 10446.0], [69.8, 10446.0], [69.9, 10446.0], [70.0, 11848.0], [70.1, 11848.0], [70.2, 11848.0], [70.3, 11848.0], [70.4, 11848.0], [70.5, 11848.0], [70.6, 11848.0], [70.7, 11848.0], [70.8, 11848.0], [70.9, 11848.0], [71.0, 12726.0], [71.1, 12726.0], [71.2, 12726.0], [71.3, 12726.0], [71.4, 12726.0], [71.5, 12726.0], [71.6, 12726.0], [71.7, 12726.0], [71.8, 12726.0], [71.9, 12726.0], [72.0, 12744.0], [72.1, 12744.0], [72.2, 12744.0], [72.3, 12744.0], [72.4, 12744.0], [72.5, 12744.0], [72.6, 12744.0], [72.7, 12744.0], [72.8, 12744.0], [72.9, 12744.0], [73.0, 12872.0], [73.1, 12872.0], [73.2, 12872.0], [73.3, 12872.0], [73.4, 12872.0], [73.5, 12872.0], [73.6, 12872.0], [73.7, 12872.0], [73.8, 12872.0], [73.9, 12872.0], [74.0, 14022.0], [74.1, 14022.0], [74.2, 14022.0], [74.3, 14022.0], [74.4, 14022.0], [74.5, 14022.0], [74.6, 14022.0], [74.7, 14022.0], [74.8, 14022.0], [74.9, 14022.0], [75.0, 15027.0], [75.1, 15027.0], [75.2, 15027.0], [75.3, 15027.0], [75.4, 15027.0], [75.5, 15027.0], [75.6, 15027.0], [75.7, 15027.0], [75.8, 15027.0], [75.9, 15027.0], [76.0, 15902.0], [76.1, 15902.0], [76.2, 15902.0], [76.3, 15902.0], [76.4, 15902.0], [76.5, 15902.0], [76.6, 15902.0], [76.7, 15902.0], [76.8, 15902.0], [76.9, 15902.0], [77.0, 16103.0], [77.1, 16103.0], [77.2, 16103.0], [77.3, 16103.0], [77.4, 16103.0], [77.5, 16103.0], [77.6, 16103.0], [77.7, 16103.0], [77.8, 16103.0], [77.9, 16103.0], [78.0, 16106.0], [78.1, 16106.0], [78.2, 16106.0], [78.3, 16106.0], [78.4, 16106.0], [78.5, 16106.0], [78.6, 16106.0], [78.7, 16106.0], [78.8, 16106.0], [78.9, 16106.0], [79.0, 16247.0], [79.1, 16247.0], [79.2, 16247.0], [79.3, 16247.0], [79.4, 16247.0], [79.5, 16247.0], [79.6, 16247.0], [79.7, 16247.0], [79.8, 16247.0], [79.9, 16247.0], [80.0, 16762.0], [80.1, 16762.0], [80.2, 16762.0], [80.3, 16762.0], [80.4, 16762.0], [80.5, 16762.0], [80.6, 16762.0], [80.7, 16762.0], [80.8, 16762.0], [80.9, 16762.0], [81.0, 17684.0], [81.1, 17684.0], [81.2, 17684.0], [81.3, 17684.0], [81.4, 17684.0], [81.5, 17684.0], [81.6, 17684.0], [81.7, 17684.0], [81.8, 17684.0], [81.9, 17684.0], [82.0, 20343.0], [82.1, 20343.0], [82.2, 20343.0], [82.3, 20343.0], [82.4, 20343.0], [82.5, 20343.0], [82.6, 20343.0], [82.7, 20343.0], [82.8, 20343.0], [82.9, 20343.0], [83.0, 20376.0], [83.1, 20376.0], [83.2, 20376.0], [83.3, 20376.0], [83.4, 20376.0], [83.5, 20376.0], [83.6, 20376.0], [83.7, 20376.0], [83.8, 20376.0], [83.9, 20376.0], [84.0, 21487.0], [84.1, 21487.0], [84.2, 21487.0], [84.3, 21487.0], [84.4, 21487.0], [84.5, 21487.0], [84.6, 21487.0], [84.7, 21487.0], [84.8, 21487.0], [84.9, 21487.0], [85.0, 21960.0], [85.1, 21960.0], [85.2, 21960.0], [85.3, 21960.0], [85.4, 21960.0], [85.5, 21960.0], [85.6, 21960.0], [85.7, 21960.0], [85.8, 21960.0], [85.9, 21960.0], [86.0, 23735.0], [86.1, 23735.0], [86.2, 23735.0], [86.3, 23735.0], [86.4, 23735.0], [86.5, 23735.0], [86.6, 23735.0], [86.7, 23735.0], [86.8, 23735.0], [86.9, 23735.0], [87.0, 24511.0], [87.1, 24511.0], [87.2, 24511.0], [87.3, 24511.0], [87.4, 24511.0], [87.5, 24511.0], [87.6, 24511.0], [87.7, 24511.0], [87.8, 24511.0], [87.9, 24511.0], [88.0, 25492.0], [88.1, 25492.0], [88.2, 25492.0], [88.3, 25492.0], [88.4, 25492.0], [88.5, 25492.0], [88.6, 25492.0], [88.7, 25492.0], [88.8, 25492.0], [88.9, 25492.0], [89.0, 26967.0], [89.1, 26967.0], [89.2, 26967.0], [89.3, 26967.0], [89.4, 26967.0], [89.5, 26967.0], [89.6, 26967.0], [89.7, 26967.0], [89.8, 26967.0], [89.9, 26967.0], [90.0, 27178.0], [90.1, 27178.0], [90.2, 27178.0], [90.3, 27178.0], [90.4, 27178.0], [90.5, 27178.0], [90.6, 27178.0], [90.7, 27178.0], [90.8, 27178.0], [90.9, 27178.0], [91.0, 27210.0], [91.1, 27210.0], [91.2, 27210.0], [91.3, 27210.0], [91.4, 27210.0], [91.5, 27210.0], [91.6, 27210.0], [91.7, 27210.0], [91.8, 27210.0], [91.9, 27210.0], [92.0, 27438.0], [92.1, 27438.0], [92.2, 27438.0], [92.3, 27438.0], [92.4, 27438.0], [92.5, 27438.0], [92.6, 27438.0], [92.7, 27438.0], [92.8, 27438.0], [92.9, 27438.0], [93.0, 28843.0], [93.1, 28843.0], [93.2, 28843.0], [93.3, 28843.0], [93.4, 28843.0], [93.5, 28843.0], [93.6, 28843.0], [93.7, 28843.0], [93.8, 28843.0], [93.9, 28843.0], [94.0, 28962.0], [94.1, 28962.0], [94.2, 28962.0], [94.3, 28962.0], [94.4, 28962.0], [94.5, 28962.0], [94.6, 28962.0], [94.7, 28962.0], [94.8, 28962.0], [94.9, 28962.0], [95.0, 29623.0], [95.1, 29623.0], [95.2, 29623.0], [95.3, 29623.0], [95.4, 29623.0], [95.5, 29623.0], [95.6, 29623.0], [95.7, 29623.0], [95.8, 29623.0], [95.9, 29623.0], [96.0, 29762.0], [96.1, 29762.0], [96.2, 29762.0], [96.3, 29762.0], [96.4, 29762.0], [96.5, 29762.0], [96.6, 29762.0], [96.7, 29762.0], [96.8, 29762.0], [96.9, 29762.0], [97.0, 38467.0], [97.1, 38467.0], [97.2, 38467.0], [97.3, 38467.0], [97.4, 38467.0], [97.5, 38467.0], [97.6, 38467.0], [97.7, 38467.0], [97.8, 38467.0], [97.9, 38467.0], [98.0, 39319.0], [98.1, 39319.0], [98.2, 39319.0], [98.3, 39319.0], [98.4, 39319.0], [98.5, 39319.0], [98.6, 39319.0], [98.7, 39319.0], [98.8, 39319.0], [98.9, 39319.0], [99.0, 56635.0], [99.1, 56635.0], [99.2, 56635.0], [99.3, 56635.0], [99.4, 56635.0], [99.5, 56635.0], [99.6, 56635.0], [99.7, 56635.0], [99.8, 56635.0], [99.9, 56635.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 25.0, "series": [{"data": [[800.0, 3.0], [900.0, 1.0], [1000.0, 1.0], [1200.0, 2.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 2.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 2.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 2.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 1.0], [3300.0, 1.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 2.0], [4300.0, 1.0], [4100.0, 1.0], [4600.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4800.0, 1.0], [5000.0, 1.0], [5200.0, 1.0], [5500.0, 1.0], [5400.0, 3.0], [5700.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6400.0, 1.0], [6700.0, 1.0], [7100.0, 3.0], [7200.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8600.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [9000.0, 1.0], [8900.0, 1.0], [10200.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [11700.0, 1.0], [11600.0, 1.0], [13700.0, 1.0], [14200.0, 1.0], [14100.0, 1.0], [14800.0, 1.0], [15700.0, 1.0], [15800.0, 1.0], [15900.0, 2.0], [16700.0, 1.0], [17600.0, 1.0], [18800.0, 1.0], [20200.0, 1.0], [22000.0, 1.0], [23000.0, 1.0], [22700.0, 1.0], [24000.0, 1.0], [23700.0, 1.0], [25000.0, 1.0], [24600.0, 1.0], [25400.0, 1.0], [25800.0, 1.0], [26800.0, 1.0], [27900.0, 1.0], [35100.0, 1.0], [37600.0, 1.0], [54300.0, 1.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 12.0], [600.0, 2.0], [700.0, 1.0], [800.0, 5.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [100.0, 25.0], [1600.0, 4.0], [2000.0, 2.0], [2100.0, 2.0], [2200.0, 2.0], [2300.0, 2.0], [2500.0, 1.0], [2600.0, 3.0], [200.0, 8.0], [3300.0, 2.0], [3500.0, 1.0], [3800.0, 1.0], [4300.0, 1.0], [4400.0, 1.0], [300.0, 4.0], [5000.0, 1.0], [5100.0, 1.0], [400.0, 4.0], [500.0, 2.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[600.0, 1.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 2.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 2.0], [2000.0, 2.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [3900.0, 2.0], [4300.0, 1.0], [4100.0, 3.0], [4400.0, 3.0], [4700.0, 2.0], [4900.0, 2.0], [5200.0, 1.0], [5600.0, 1.0], [5400.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [6200.0, 2.0], [6600.0, 2.0], [6500.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7300.0, 2.0], [7600.0, 1.0], [8100.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [9100.0, 3.0], [9000.0, 1.0], [9500.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [10400.0, 1.0], [11800.0, 1.0], [12700.0, 2.0], [12800.0, 1.0], [14000.0, 1.0], [15000.0, 1.0], [15900.0, 1.0], [16100.0, 2.0], [16200.0, 1.0], [16700.0, 1.0], [17600.0, 1.0], [20300.0, 2.0], [21400.0, 1.0], [21900.0, 1.0], [23700.0, 1.0], [24500.0, 1.0], [25400.0, 1.0], [27200.0, 1.0], [27400.0, 1.0], [27100.0, 1.0], [26900.0, 1.0], [29600.0, 1.0], [28900.0, 1.0], [28800.0, 1.0], [29700.0, 1.0], [38400.0, 1.0], [39300.0, 1.0], [56600.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 205.0, "series": [{"data": [[0.0, 54.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 41.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 205.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.6856424E12, "maxY": 11.915730337078651, "series": [{"data": [[1.68564252E12, 11.915730337078651], [1.6856424E12, 4.0], [1.68564246E12, 8.983333333333334]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68564252E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 93.0, "minX": 1.0, "maxY": 26670.5, "series": [{"data": [[8.0, 8408.0], [2.0, 25692.5], [9.0, 14963.0], [10.0, 7829.0], [11.0, 7986.666666666667], [12.0, 3084.0], [3.0, 15176.0], [13.0, 4711.5], [14.0, 10771.666666666668], [15.0, 17163.85714285714], [4.0, 3184.4444444444443], [16.0, 10965.444444444445], [1.0, 15954.0], [17.0, 12162.888888888889], [18.0, 12466.1], [19.0, 5916.0], [5.0, 3876.9999999999995], [6.0, 5885.428571428572], [7.0, 9289.25]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[10.689999999999996, 9265.209999999995]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[8.0, 904.0], [2.0, 977.5], [9.0, 1111.0], [10.0, 132.5], [11.0, 989.0], [12.0, 93.0], [3.0, 663.0], [13.0, 559.7500000000001], [14.0, 1010.6666666666667], [15.0, 1385.1428571428573], [4.0, 773.6666666666666], [16.0, 1447.5555555555557], [1.0, 149.0], [17.0, 1676.7777777777776], [18.0, 2093.1], [19.0, 699.5], [5.0, 448.61538461538464], [6.0, 545.7142857142857], [7.0, 499.75]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[10.689999999999996, 1001.8799999999997]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[8.0, 9311.75], [2.0, 26670.5], [9.0, 16074.5], [10.0, 7961.5], [11.0, 8975.333333333332], [12.0, 3177.0], [3.0, 15839.25], [13.0, 5271.625], [14.0, 11782.666666666668], [15.0, 18549.428571428572], [4.0, 3958.222222222222], [16.0, 12413.222222222223], [1.0, 16103.0], [17.0, 13839.777777777777], [18.0, 14559.699999999999], [19.0, 6615.5], [5.0, 4326.000000000001], [6.0, 6431.0], [7.0, 9789.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[10.689999999999996, 10267.320000000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 19.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4.133333333333334, "minX": 1.6856424E12, "maxY": 1275024.3333333333, "series": [{"data": [[1.68564252E12, 1275024.3333333333], [1.6856424E12, 4.133333333333334], [1.68564246E12, 686600.4666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68564252E12, 615.6], [1.6856424E12, 5.066666666666666], [1.68564246E12, 392.6666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68564252E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 607.0, "minX": 1.6856424E12, "maxY": 11065.153846153851, "series": [{"data": [[1.68564252E12, 10041.492307692308], [1.68564246E12, 7823.542857142859]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.68564252E12, 667.4791666666665], [1.6856424E12, 607.0], [1.68564246E12, 1338.7000000000003]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.68564252E12, 11065.153846153851], [1.68564246E12, 8785.628571428573]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68564252E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 607.0, "minX": 1.6856424E12, "maxY": 1920.6285714285714, "series": [{"data": [[1.68564252E12, 1367.5230769230766], [1.68564246E12, 1920.6285714285714]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.68564252E12, 667.4791666666665], [1.6856424E12, 607.0], [1.68564246E12, 1338.7000000000003]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.68564252E12, 1023.4461538461532], [1.68564246E12, 961.8285714285714]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68564252E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 277.5833333333334, "minX": 1.6856424E12, "maxY": 1083.257142857143, "series": [{"data": [[1.68564252E12, 513.8923076923079], [1.68564246E12, 1083.257142857143]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.68564252E12, 277.5833333333334], [1.6856424E12, 383.5], [1.68564246E12, 647.5999999999999]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.68564252E12, 485.2153846153846], [1.68564246E12, 426.62857142857143]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68564252E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 66.0, "minX": 1.6856424E12, "maxY": 56635.0, "series": [{"data": [[1.68564252E12, 56635.0], [1.6856424E12, 643.0], [1.68564246E12, 27438.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68564252E12, 23812.599999999995], [1.6856424E12, 643.0], [1.68564246E12, 15007.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68564252E12, 54799.830000000016], [1.6856424E12, 643.0], [1.68564246E12, 27390.12]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68564252E12, 28995.04999999999], [1.6856424E12, 643.0], [1.68564246E12, 24006.599999999988]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68564252E12, 74.0], [1.6856424E12, 571.0], [1.68564246E12, 66.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68564252E12, 3746.0], [1.6856424E12, 607.0], [1.68564246E12, 2951.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68564252E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1424.0, "minX": 1.0, "maxY": 14164.0, "series": [{"data": [[1.0, 2144.5], [2.0, 2800.0], [8.0, 1424.0], [4.0, 6009.5], [9.0, 1682.5], [5.0, 4234.0], [10.0, 3255.0], [11.0, 14164.0], [6.0, 3890.5], [3.0, 2951.5], [7.0, 5572.0], [15.0, 4416.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 199.5, "minX": 1.0, "maxY": 2144.5, "series": [{"data": [[1.0, 2144.5], [2.0, 765.0], [8.0, 199.5], [4.0, 374.0], [9.0, 343.0], [5.0, 229.0], [10.0, 632.0], [11.0, 805.0], [6.0, 449.5], [3.0, 732.0], [7.0, 723.0], [15.0, 1067.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.6856424E12, "maxY": 2.5, "series": [{"data": [[1.68564252E12, 2.3666666666666667], [1.6856424E12, 0.13333333333333333], [1.68564246E12, 2.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68564252E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6856424E12, "maxY": 2.1666666666666665, "series": [{"data": [[1.68564252E12, 2.1666666666666665], [1.68564246E12, 1.1666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68564252E12, 0.8], [1.6856424E12, 0.03333333333333333], [1.68564246E12, 0.8333333333333334]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68564252E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6856424E12, "maxY": 1.0833333333333333, "series": [{"data": [[1.68564252E12, 1.0833333333333333], [1.68564246E12, 0.5833333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.68564252E12, 0.8], [1.6856424E12, 0.03333333333333333], [1.68564246E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.68564252E12, 1.0833333333333333], [1.68564246E12, 0.5833333333333334]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68564252E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6856424E12, "maxY": 2.966666666666667, "series": [{"data": [[1.68564252E12, 2.966666666666667], [1.6856424E12, 0.03333333333333333], [1.68564246E12, 2.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68564252E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

